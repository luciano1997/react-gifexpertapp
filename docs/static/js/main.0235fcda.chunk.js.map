{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","setTimeout","then","imgs","useFetchGifs","GiftExpertApp","personajes","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OAEI,sBAAMC,SAXW,SAAEC,GACfA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAG,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAMtB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCVlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAG1Ca,QAAQC,IAAIR,GAfO,kBAgBZA,GAhBY,4CAAH,sDCWLS,EATY,SAAC,GAAwB,IAAtBN,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OADAa,QAAQC,IAAI,CAAEL,KAAIC,QAAOV,QAErB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,kCAAMA,EAAN,WCoBGS,EAvBQ,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAEtB,ECFwB,SAACA,GAEzB,MAA0Bd,mBACtB,CACIqB,KAAM,GACNe,SAAS,IAHjB,mBAAOC,EAAP,KAAcC,EAAd,KAwBA,OAjBAC,qBAAU,WAENC,YAAW,WACP3B,EAAQC,GACH2B,MAAK,SAAAC,GACFJ,EAAS,CACLjB,KAAMqB,EACNN,SAAS,SAGtB,OAIJ,CAACtB,IAGGuB,EDxByBM,CAAc7B,GAAlCa,EAAZ,EAAON,KAAce,EAArB,EAAqBA,QAErB,OACI,qCACI,qBAAIJ,UAAU,mCAAd,cAAmDlB,EAAnD,OAECsB,GAAW,mBAAGJ,UAAU,mCAAb,oCAEZ,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEuBtBmB,EAhCc,SAACC,GAE1B,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAUA,OAAO,eAAC,WAAD,WAEH,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ+C,EAAWvB,KAAI,SAAAT,GAAQ,OAEnB,aADA,CACC,EAAD,CAEIA,SAAUA,GADLA,Y,MClB7BiC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0235fcda.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setinputValue] = useState('')\r\n    \r\n    //const data = fetch('https://cors-anywhere.herokuapp.com/https://localhost:44343/weatherforecast');\r\n\r\n\r\n    //data.then(console.log(JSON.stringify(data)));\r\n    const handleInputChange = ( e ) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n            e.preventDefault()\r\n\r\n            if ( inputValue.trim().length > 2) {\r\n                setCategories( cat => [ inputValue, ...cat ]);\r\n                setinputValue('');\r\n            }\r\n           \r\n    }\r\n    return (\r\n \r\n        <form onSubmit={handleSubmit} >\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            /> \r\n        </form>\r\n\r\n    )\r\n\r\n        \r\n}\r\n AddCategory.propTypes ={\r\n    setCategories : PropTypes.func.isRequired,\r\n\r\n }\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=iCdXVwWKP4wtVBXc29390NwjO1l0lKeq`;\r\n\r\n    const resp = await fetch(url);\r\n\r\n    const { data } = await resp.json();\r\n    //console.log(data);\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    console.log(gifs);\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    console.log({ id, title, url })\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\nexport default GifGridItem;\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images , loading} = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__flash\"> {category} </h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\"> Cargando Imagenes ...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img} />\r\n                    ))\r\n                }\r\n\r\n            </div> \r\n        </>\r\n    );\r\n}\r\nexport default GifGrid;","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState(\r\n        {\r\n            data: [],\r\n            loading: true\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n\r\n        setTimeout(() => {\r\n            getGifs(category)\r\n                .then(imgs => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                })\r\n        }, 2000)\r\n        //forma corta\r\n        // .then( imgs => setImages(imgs) ) //forma larga\r\n\r\n    }, [category])\r\n\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react';\r\n//import PropTypes from 'prop-types';\r\nimport { Fragment } from 'react';\r\nimport { AddCategory } from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\n//import { ConsumoApi } from './ConsumoApi';\r\n\r\n\r\n\r\nexport const GiftExpertApp = (personajes) => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const HandleAdd = () => {\r\n    //     // categories.push('Hunter X Hunter')\r\n    //     //console.log(categories);\r\n    //     setcategories( [...categories, 'Cazador X']);\r\n    //     //setcategories( cats =>  [...cats, 'Cazador X']);\r\n    // }\r\n\r\n    //console.log(setCategories);\r\n    return <Fragment>\r\n\r\n        <h2> GiftExpertApp</h2>\r\n        <AddCategory setCategories={setCategories} />\r\n        <hr />\r\n\r\n        <ol>\r\n            {\r\n                categories.map(category => (\r\n                    //    <li key={ category }> { category } </li>\r\n                    <GifGrid \r\n                        key={category}\r\n                        category={category} />\r\n                ))\r\n            }\r\n        </ol>\r\n\r\n    </Fragment>\r\n}\r\n\r\nexport default GiftExpertApp;\r\n\r\n// categories.map( (categoria) => \r\n\r\n// <GiftGrid category = {categoria}\r\n// key={categoria} \r\n// />\r\n// )","import React from 'react';\n//import { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\n//import { FormWithCustomHook } from './components/CargaInteligenteComponents/FormWithCustomHook';\n//import { VehiculoComponent } from './components/CargaInteligenteComponents/VehiculoComponent';\n//import ConsumoApi from './components/ConsumoApi';\nimport GiftExpertApp from './components/GiftExpertApp';\n//import GiftExpertApp from './components/GiftExpertApp';\nimport './index.css';\n\n\n\n\n\nReactDOM.render(\n    <GiftExpertApp  />,\n    document.getElementById('root')\n);\n\n// ReactDOM.render(\n//   <VehiculoComponent/>,\n//   document.getElementById('root')\n// );\n// ReactDOM.render(\n//   <FormWithCustomHook />,\n//   document.getElementById('root')\n// );\n\n\n\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}